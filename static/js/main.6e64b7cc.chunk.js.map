{"version":3,"sources":["components/WikiSearchBar.js","components/WikiSearchResult.js","components/App.js","reportWebVitals.js","index.js"],"names":["WikiSearchBar","formRef","React","createRef","handleSubmit","value","props","sendSearchQuery","this","current","setFieldsValue","searchQuery","ref","initialValues","language","onFinish","Item","name","label","Group","rules","required","message","type","htmlType","Component","WikiSearchResult","searchResult","articles","links","result","map","article","index","href","target","rel","Header","Layout","Content","App","initialQuery","state","currentQueryData","currentQueryPath","newResult","searchQueries","Map","query","wikiUri","URLSearchParams","action","search","format","origin","fetch","then","json","newQueriesMap","k","v","set","queryPath","getQueryPath","getResultMapKey","setState","generatePath","lang","updateCurrentQueryPath","event","queryKey","attributes","querykey","get","pathname","menuItems","queryResult","push","to","onClick","basename","className","theme","mode","selectedKeys","exact","path","render","routeData","match","params","decodeURIComponent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e64b7cc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Form, Input, Radio } from \"antd\";\r\n\r\n\r\nclass WikiSearchBar extends Component {\r\n  formRef = React.createRef();\r\n\r\n  handleSubmit = (value) => {\r\n    this.props.sendSearchQuery(value);\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    this.formRef.current.setFieldsValue(this.props.searchQuery);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Form ref={this.formRef} initialValues={{language:'en',searchQuery:''}} onFinish={this.handleSubmit}>\r\n        <Form.Item name=\"language\" label=\"Language\">\r\n          <Radio.Group>\r\n            <Radio value=\"en\">en</Radio>\r\n            <Radio value=\"pl\">pl</Radio>\r\n          </Radio.Group>\r\n        </Form.Item>\r\n        <Form.Item name=\"searchQuery\" label=\"Search for\"\r\n          rules={[{\r\n            required: true,\r\n            message: 'Please type in a query to search'\r\n          }]} \r\n        >\r\n          <Input/>\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\">Search</Button>\r\n        </Form.Item>\r\n      </Form>\r\n    )\r\n  }\r\n};\r\n\r\nexport default WikiSearchBar;","import { Component } from \"react\";\r\n\r\nclass WikiSearchResult extends Component{\r\n    render(){\r\n        const {articles, links} = this.props.searchResult\r\n        const result = articles.map((article, index) => {\r\n          return <li key={index}><a href={links[index]} target=\"_blank\" rel=\"noreferrer\">{article}</a></li>\r\n        })\r\n\r\n        return (\r\n            <ul>{result}</ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WikiSearchResult;","import { Component } from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport WikiSearchBar from './WikiSearchBar';\r\nimport WikiSearchResult from './WikiSearchResult';\r\nimport { Layout, Menu } from 'antd';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect,\r\n  generatePath\r\n} from \"react-router-dom\";\r\n\r\nconst { Header, Content } = Layout;\r\n\r\nclass App extends Component {\r\n\r\n  initialQuery = {\r\n    language: 'en',\r\n    searchQuery: ''\r\n  }\r\n\r\n  state = {\r\n    currentQueryData: this.initialQuery,\r\n    currentQueryPath: '/',\r\n    newResult: false,\r\n    searchQueries: new Map()\r\n  }\r\n\r\n  handleSubmit = (query) => {\r\n    const wikiUri = `https://${query.language}.wikipedia.org/w/api.php?` + new URLSearchParams({\r\n      action: 'opensearch',\r\n      search: query.searchQuery,\r\n      format: 'json',\r\n      origin: '*'\r\n    });\r\n    \r\n    fetch(wikiUri).then((result) => result.json())\r\n      .then((result) => {\r\n        var newQueriesMap = new Map();\r\n        for (const [k, v] of this.state.searchQueries) {\r\n          newQueriesMap.set(k, v);\r\n        }\r\n\r\n        const queryPath = this.getQueryPath(query);\r\n\r\n        newQueriesMap.set(this.getResultMapKey(query), {\r\n          query: query,\r\n          queryPath: queryPath,\r\n          result: {\r\n            articles: result[1],\r\n            links: result[3]\r\n          }\r\n        });\r\n\r\n        this.setState({\r\n          currentQueryData: query,\r\n          currentQueryPath: queryPath,\r\n          searchQueries: newQueriesMap,\r\n          newResult: true\r\n        })\r\n      })\r\n  }\r\n\r\n  getResultMapKey = (query) => query.language + '|' + query.searchQuery;\r\n\r\n  getQueryPath = (query) => {\r\n    return generatePath('/result/:lang/:query', { lang: query.language, query: query.searchQuery });\r\n  }\r\n\r\n  updateCurrentQueryPath = (event) => {\r\n    const queryKey = event.target.attributes.querykey;\r\n    const currentQueryData = this.state.searchQueries.get(queryKey?.value);\r\n    \r\n    this.setState({\r\n      currentQueryPath: event.target.pathname, // target is an <a> element,\r\n      currentQueryData: currentQueryData?.query || this.initialQuery\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const menuItems = [];\r\n    for (const [queryKey, queryResult] of this.state.searchQueries) {\r\n      const { query, queryPath } = queryResult;\r\n      menuItems.push((\r\n        <Menu.Item key={queryPath}>\r\n          <Link to={queryPath} querykey={queryKey} onClick={this.updateCurrentQueryPath}>\r\n            {query.searchQuery} ({query.language})\r\n          </Link>\r\n        </Menu.Item>\r\n      ));\r\n    }\r\n\r\n    return (\r\n      <Router basename=\"/wiki-explorer\">\r\n        <Layout className=\"layout\">\r\n\r\n          <Header>\r\n            <Menu theme=\"dark\" mode=\"horizontal\" selectedKeys={[this.state.currentQueryPath]}>\r\n              <Menu.Item key=\"/\">\r\n                <Link to=\"/\" onClick={this.updateCurrentQueryPath}>\r\n                  New Search\r\n                </Link>\r\n              </Menu.Item>\r\n              {menuItems}\r\n            </Menu>\r\n          </Header>\r\n\r\n          <Content>\r\n            <div className=\"site-layout-content\">\r\n              <WikiSearchBar sendSearchQuery={this.handleSubmit} searchQuery={this.state.currentQueryData} />\r\n\r\n              {this.state.newResult ? <Redirect to={this.state.currentQueryPath} /> : null}\r\n\r\n              <Switch>\r\n\r\n                <Route key=\"home\" exact path=\"/\">\r\n                  <WikiSearchResult searchResult={{ articles: [], links: [] }} />\r\n                </Route>\r\n\r\n                <Route key=\"result\" exact path=\"/result/:lang/:query\"\r\n                  render={(routeData) => {\r\n                    const { lang, query } = routeData.match.params;\r\n                    const queryKey = this.getResultMapKey({ language: lang, searchQuery: decodeURIComponent(query) });\r\n                    const queryResult = this.state.searchQueries.get(queryKey)?.result;\r\n                    return queryResult ? <WikiSearchResult searchResult={queryResult} /> : <Redirect to=\"/\" />;\r\n                  }\r\n                  }\r\n                />\r\n              </Switch>\r\n\r\n            </div>\r\n          </Content>\r\n        </Layout>\r\n\r\n      </Router>\r\n\r\n    )\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.newResult) {\r\n      this.setState({ newResult: false });\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}